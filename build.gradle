group = 'io.listened'
version = '1.0'

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/snapshot'
        }
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'listened-api'
    version = '1.0'
}

def final sourceCompatibility = 1.8
def final targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework:spring-framework-bom:${springVersion}"
        mavenBom "org.springframework.data:spring-data-releasetrain:${springDataVersion}"
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    //compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    compile("org.springframework.security.oauth:spring-security-oauth2:$springSecurityOauth2Version")
    compile("org.springframework.security:spring-security-jwt:$springSecurityJWTVersion")
    compile("org.springframework.social:spring-social-core")
    compile("org.springframework.social:spring-social-facebook")
    compile("org.springframework.social:spring-social-twitter")

    //compile("org.springframework.hateoas:spring-hateoas:$springHateoasVersion")
    compile("org.springframework.hateoas:spring-hateoas:$springHateoasVersion") { changing = true }

    compile("org.hibernate:hibernate-validator:5.1.3.Final")

    compile("com.google.guava:guava:12.0")

    compile("org.projectlombok:lombok:1.16.6")

    //compile("org.springframework.boot:spring-boot-actuator")

    compile("com.github.claym:listened-common:-SNAPSHOT") { changing = true }
    //compile("com.github.claym:listened-common:a69f86c4e3")



    runtime("org.postgresql:postgresql:9.4-1201-jdbc41")
    testCompile("org.springframework.boot:spring-boot-starter-test") 
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.4"
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.buildDir
    rename {
        jar.baseName + ".jar"
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file("${project.buildDir}/${jar.baseName}.jar").delete()
}
