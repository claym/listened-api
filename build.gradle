buildscript {
    ext {
        //springBootVersion = '1.2.4.RELEASE'
        //use gradle.properties
    }
    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")

    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'listenedapi'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-integration:1.0.0.RELEASE")
    compile("org.springframework.security.oauth:spring-security-oauth2:$springSecurityOauth2Version")
    compile("org.springframework.security:spring-security-jwt:$springSecurityJWTVersion")
    compile("org.springframework.social:spring-social-core")
    compile("org.springframework.social:spring-social-facebook")
    compile("org.springframework.social:spring-social-twitter")
    compile("com.google.guava:guava:12.0")

    //compile("org.springframework.boot:spring-boot-actuator")
    runtime("org.postgresql:postgresql:9.4-1201-jdbc41")
    testCompile("org.springframework.boot:spring-boot-starter-test") 
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.4"
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.buildDir
    rename {
        jar.baseName + ".jar"
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file("${project.buildDir}/${jar.baseName}.jar").delete()
}